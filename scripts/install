#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

### If the app uses nginx as web server (written in HTML/PHP in most cases), the final path should be "/var/www/$app".
### If the app provides an internal web server (or uses another application server such as uwsgi), the final path should be "/opt/yunohost/$app"
final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path $path_url)

# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app is_public $is_public

#==============================================
# INSTALL POSTGRES
#==============================================

ynh_install_app_dependencies postgresql apt-transport-https

#=================================================
# INSTALL NODEJS
#=================================================
# Use Helper instead of package from the repo

ynh_install_nodejs 6

#==============================================
# CREATE DB
#==============================================

db_user=$app
db_name=$app
db_pass=$(ynh_string_random 20)
ynh_app_setting_set $app db_pass $db_pass

# Create postgresql database
ynh_psql_test_if_first_run
ynh_psql_create_user $db_user $db_pass
ynh_psql_execute_as_root \
"CREATE DATABASE $db_name ENCODING 'UTF8' LC_COLLATE='C' LC_CTYPE='C' template=template0 OWNER $db_user;"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set $app final_path $final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# MODIFY A CONFIG FILE
#=================================================

# Main config File
ynh_replace_string "__DB_USER__" "$db_user" "../conf/config.json.example"
ynh_replace_string "__DB_NAME__" "$db_name" "../conf/config.json.example"
ynh_replace_string "__DB_PASS__" "$db_pass" "../conf/config.json.example"
cp ../conf/config.json.example $final_path/config.json

# DB Config File
ynh_replace_string "__DB_USER__" "$db_user" "../conf/.sequelizerc.example"
ynh_replace_string "__DB_NAME__" "$db_name" "../conf/.sequelizerc.example"
ynh_replace_string "__DB_PASS__" "$db_pass" "../conf/.sequelizerc.example"
cp ../conf/.sequelizerc.example $final_path/.sequelizerc

#==============================================
# INSTALL CODIMD
#==============================================

pushd $final_path
npm install
npm run build
node_modules/.bin/sequelize db:migrate
popd

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# SETUP SYSTEMD
#=================================================

ynh_replace_string "__APP__" "$app" "../conf/systemd.service"
ynh_replace_string "__FINALPATH__" "$final_path" "../conf/systemd.service"
ynh_replace_string "__NODEJS__" "$nodejs_use_version" "../conf/systemd.service"
ynh_replace_string "__ENV_PATH__" "$PATH" "../conf/systemd.service"
ynh_replace_string "__NODE__" "$nodejs_path" "../conf/systemd.service"
cp ../conf/systemd.service /etc/systemd/system/$app.service
ynh_add_systemd_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create $app

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

### `ynh_store_file_checksum` is used to store the checksum of a file.
### That way, during the upgrade script, by using `ynh_backup_if_checksum_is_different`,
### you can make a backup of this file before modifying it again if the admin had modified it.

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum "$final_path/config.json"


#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

### For security reason, any app should set the permissions to root: before anything else.
### Then, if write authorization is needed, any access should be given only to directories
### that really need such authorization.

# Set permissions to app files
chown -R $app:$app $final_path


#=================================================
# SETUP SSOWAT
#=================================================

# If app is public, add url to SSOWat conf as skipped_uris
if [ $is_public -eq 1 ]; then
  # unprotected_uris allows SSO credentials to be passed anyway.
  ynh_app_setting_set "$app" unprotected_uris "/"
fi

# Reload services
systemctl enable codimd
systemctl start codimd
systemctl restart nginx
